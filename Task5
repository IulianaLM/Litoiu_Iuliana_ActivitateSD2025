#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//trebuie sa folositi fisierul masini.txt
//sau va creati un alt fisier cu alte date

struct StructuraMasina {
    int id;
    int nrUsi;
    float pret;
    char* model;
    char* numeSofer;
    unsigned char serie;
};
typedef struct StructuraMasina Masina;

struct Nod {
    Masina info;
    struct Nod* next;
};

typedef struct Nod Nod;

Masina citireMasinaDinFisier(FILE* file) {
    char buffer[100];
    char sep[3] = ",\n";
    fgets(buffer, 100, file);
    char* aux;
    Masina m1;
    aux = strtok(buffer, sep);
    m1.id = atoi(aux);
    m1.nrUsi = atoi(strtok(NULL, sep));
    m1.pret = atof(strtok(NULL, sep));
    aux = strtok(NULL, sep);
    m1.model = malloc(strlen(aux) + 1);
    strcpy_s(m1.model, strlen(aux) + 1, aux);

    aux = strtok(NULL, sep);
    m1.numeSofer = malloc(strlen(aux) + 1);
    strcpy_s(m1.numeSofer, strlen(aux) + 1, aux);

    m1.serie = *strtok(NULL, sep);
    return m1;
}

void afisareMasina(Masina masina) {
    printf("Id: %d\n", masina.id);
    printf("Nr. usi : %d\n", masina.nrUsi);
    printf("Pret: %.2f\n", masina.pret);
    printf("Model: %s\n", masina.model);
    printf("Nume sofer: %s\n", masina.numeSofer);
    printf("Serie: %c\n\n", masina.serie);
}

void afisareListaMasini(Nod* cap) {
    while (cap != NULL) {
        afisareMasina(cap->info);
        cap = cap->next;
    }
}

void adaugaMasinaInLista(Nod** cap, Masina masinaNoua) {
    Nod* nou = (Nod*)malloc(sizeof(Nod));
    nou->info = masinaNoua;
    nou->next = NULL;
    if (*cap) {
        Nod* p = *cap;
        while (p->next) {
            p = p->next;
        }
        p->next = nou;
    }
    else {
        *cap = nou;
    }
}

void adaugaLaInceputInLista(Nod** cap, Masina masinaNoua) {
    Nod* nou = (Nod*)malloc(sizeof(Nod));
    nou->info = masinaNoua;
    nou->next = *cap;
    *cap = nou;
}

Nod* citireListaMasiniDinFisier(const char* numeFisier) {
    Nod* cap = NULL;
    FILE* f = fopen(numeFisier, "r");
    if (f) {
        while (!feof(f)) {
            // lista cu inserare la sfarsit
            adaugaMasinaInLista(&cap, citireMasinaDinFisier(f));
        }
    }
    fclose(f);
    return cap;
}

void dezalocareListaMasini(Nod** cap) {
    while (*cap) {
        Nod* p = *cap;
        (*cap) = p->next;
        if (p->info.model) {
            free(p->info.model);
        }
        if (p->info.numeSofer) {
            free(p->info.numeSofer);
        }
        free(p);
    }
}

float calculeazaPretMediu(Nod* cap) {
    float suma = 0;
    int contor = 0;
    while (cap) {
        suma += cap->info.pret;
        contor++;
        cap = cap->next;
    }
    if (contor > 0) {
        return suma / contor;
    }
    return 0;
}

float calculeazaPretulMasinilorUnuiSofer(Nod* cap, const char* numeSofer) {
    float suma = 0;
    while (cap) {
        if (strcmp(cap->info.numeSofer, numeSofer) == 0) {
            suma += cap->info.pret;
        }
        cap = cap->next;
    }
    return suma;
}
void stergeMasiniDinSeria(Nod** cap, char serieCautata) {
    while ((*cap) && (*cap)->info.serie == serieCautata) {
        Nod* aux = *cap;
        (*cap) = aux->next;
        if (aux->info.numeSofer) {
            free(aux->info.numeSofer);
        }
        if (aux->info.model) {
            free(aux->info.model);
        }
        free(aux);
    }
    if ((*cap)) {
        Nod* p = *cap;
        while (p) {
            while (p->next && p->next->info.serie != serieCautata) {
                p = p->next;
            }
            if (p->next) {
                Nod* aux = p->next;
                p->next = aux->next;
                if (aux->info.numeSofer) {
                    free(aux->info.numeSofer);
                }
                if (aux->info.model) {
                    free(aux->info.model);
                }
                free(aux);
            }
            else {
                p = NULL;
            }
        }
    }

}

void stergeDePePozitie(Nod** cap, int pozitie) {
    if (pozitie < 0 || !(*cap)) return;

    Nod* temp = *cap;

    if (pozitie == 0) {
        *cap = temp->next;
    }
    else {
        Nod* anterior = NULL;
        for (int i = 0; temp != NULL && i < pozitie; i++) {
            anterior = temp;
            temp = temp->next;
        }
        if (!temp) return;

        anterior->next = temp->next;
    }

    if (temp->info.model) free(temp->info.model);
    if (temp->info.numeSofer) free(temp->info.numeSofer);
    free(temp);
}

void inserareSortataDupaPret(Nod** cap, Masina masinaNoua) {
    Nod* nou = (Nod*)malloc(sizeof(Nod));
    nou->info = masinaNoua;
    nou->next = NULL;

    if (!(*cap) || (*cap)->info.pret > masinaNoua.pret) {
        nou->next = *cap;
        *cap = nou;
        return;
    }

    Nod* temp = *cap;
    while (temp->next && temp->next->info.pret < masinaNoua.pret) {
        temp = temp->next;
    }
    nou->next = temp->next;
    temp->next = nou;
}

Masina* extrageInVector(Nod* cap, int* dimVector) {
    int nr = 0;
    Nod* temp = cap;

    while (temp) {
        if (temp->info.nrUsi > 2)
            nr++;
        temp = temp->next;
    }

    *dimVector = nr;
    if (nr == 0) return NULL;

    Masina* vector = (Masina*)malloc(nr * sizeof(Masina));
    temp = cap;
    int index = 0;

    while (temp) {
        if (temp->info.nrUsi > 2) {
            vector[index].id = temp->info.id;
            vector[index].nrUsi = temp->info.nrUsi;
            vector[index].pret = temp->info.pret;
            vector[index].serie = temp->info.serie;
            vector[index].model = strdup(temp->info.model);
            vector[index].numeSofer = strdup(temp->info.numeSofer);
            index++;
        }
        temp = temp->next;
    }

    return vector;
}

void interschimbaPozitii(Nod* cap, int poz1, int poz2) {
    if (poz1 == poz2 || !cap) return;

    Nod* nod1 = NULL, * nod2 = NULL;
    int index = 0;
    Nod* temp = cap;

    while (temp) {
        if (index == poz1) nod1 = temp;
        if (index == poz2) nod2 = temp;
        temp = temp->next;
        index++;
    }

    if (nod1 && nod2) {
        Masina aux = nod1->info;
        nod1->info = nod2->info;
        nod2->info = aux;
    }
}


int main() {
    Nod* cap = citireListaMasiniDinFisier("masini.txt");

    printf("\nLista initiala:\n");
    afisareListaMasini(cap);

    printf("\n--- Stergere pe pozitia 2 ---\n");
    stergeDePePozitie(&cap, 2);
    afisareListaMasini(cap);

    printf("\n--- Inserare sortata (dupa pret) ---\n");
    Masina m = { 999, 4, 12345.5, strdup("Dacia"), strdup("Popescu"), 'Z' };
    inserareSortataDupaPret(&cap, m);
    afisareListaMasini(cap);

    printf("\n--- Elemente cu mai mult de 2 usi ---\n");
    int dim;
    Masina* vector = extrageInVector(cap, &dim);
    for (int i = 0; i < dim; i++)
        afisareMasina(vector[i]);

    printf("\n--- Interschimbare pozitii 0 si 1 ---\n");
    interschimbaPozitii(cap, 0, 1);
    afisareListaMasini(cap);

    for (int i = 0; i < dim; i++) {
        free(vector[i].model);
        free(vector[i].numeSofer);
    }
    free(vector);
    dezalocareListaMasini(&cap);
    return 0;
}
