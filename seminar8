#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct StructuraMasina {
	int id;
	int nrUsi;
	float pret;
	char* model;
	char* numeSofer;
	unsigned char serie;
};
typedef struct StructuraMasina Masina;

typedef struct Nod {
	Masina info;
	struct Nod* st;
	struct Nod* dr;
} Nod;

Masina citireMasinaDinFisier(FILE* file) {
	char buffer[100];
	char sep[3] = ",\n";
	if (!fgets(buffer, 100, file)) {
		Masina m = { 0 };
		m.model = NULL;
		m.numeSofer = NULL;
		return m;
	}
	char* aux;
	Masina m1;
	aux = strtok(buffer, sep);
	m1.id = atoi(aux);
	m1.nrUsi = atoi(strtok(NULL, sep));
	m1.pret = atof(strtok(NULL, sep));
	aux = strtok(NULL, sep);
	m1.model = malloc(strlen(aux) + 1);
	strcpy(m1.model, aux);

	aux = strtok(NULL, sep);
	m1.numeSofer = malloc(strlen(aux) + 1);
	strcpy(m1.numeSofer, aux);

	m1.serie = *strtok(NULL, sep);
	return m1;
}

void afisareMasina(Masina masina) {
	printf("Id: %d\n", masina.id);
	printf("Nr. usi: %d\n", masina.nrUsi);
	printf("Pret: %.2f\n", masina.pret);
	printf("Model: %s\n", masina.model);
	printf("Nume sofer: %s\n", masina.numeSofer);
	printf("Serie: %c\n\n", masina.serie);
}

Nod* adaugaMasinaInArbore(Nod* radacina, Masina masinaNoua) {
	if (radacina == NULL) {
		Nod* nou = (Nod*)malloc(sizeof(Nod));
		nou->info = masinaNoua;
		nou->st = nou->dr = NULL;
		return nou;
	}
	if (masinaNoua.id < radacina->info.id)
		radacina->st = adaugaMasinaInArbore(radacina->st, masinaNoua);
	else
		radacina->dr = adaugaMasinaInArbore(radacina->dr, masinaNoua);
	return radacina;
}

Nod* citireArboreDeMasiniDinFisier(const char* numeFisier) {
	FILE* f = fopen(numeFisier, "r");
	if (!f) {
		printf("Eroare deschidere fisier.\n");
		return NULL;
	}
	Nod* radacina = NULL;
	while (!feof(f)) {
		Masina m = citireMasinaDinFisier(f);
		if (m.model != NULL) // verificare dacÄƒ s-a citit corect
			radacina = adaugaMasinaInArbore(radacina, m);
	}
	fclose(f);
	return radacina;
}

void afisarePreordine(Nod* rad) {
	if (rad) {
		afisareMasina(rad->info);
		afisarePreordine(rad->st);
		afisarePreordine(rad->dr);
	}
}

void afisareInordine(Nod* rad) {
	if (rad) {
		afisareInordine(rad->st);
		afisareMasina(rad->info);
		afisareInordine(rad->dr);
	}
}

void afisarePostordine(Nod* rad) {
	if (rad) {
		afisarePostordine(rad->st);
		afisarePostordine(rad->dr);
		afisareMasina(rad->info);
	}
}

void afisareMasiniDinArbore(Nod* rad) {
	printf("Preordine:\n");
	afisarePreordine(rad);
	printf("\nInordine:\n");
	afisareInordine(rad);
	printf("\nPostordine:\n");
	afisarePostordine(rad);
}

void dezalocareMasina(Masina m) {
	free(m.model);
	free(m.numeSofer);
}

void dezalocareArboreDeMasini(Nod* rad) {
	if (rad) {
		dezalocareArboreDeMasini(rad->st);
		dezalocareArboreDeMasini(rad->dr);
		dezalocareMasina(rad->info);
		free(rad);
	}
}

Masina getMasinaByID(Nod* rad, int id) {
	if (rad == NULL) {
		Masina gol = { 0 };
		gol.model = NULL;
		gol.numeSofer = NULL;
		return gol;
	}
	if (id == rad->info.id)
		return rad->info;
	else if (id < rad->info.id)
		return getMasinaByID(rad->st, id);
	else
		return getMasinaByID(rad->dr, id);
}

int determinaNumarNoduri(Nod* rad) {
	if (rad == NULL)
		return 0;
	return 1 + determinaNumarNoduri(rad->st) + determinaNumarNoduri(rad->dr);
}

int calculeazaInaltimeArbore(Nod* rad) {
	if (rad == NULL)
		return 0;
	int hSt = calculeazaInaltimeArbore(rad->st);
	int hDr = calculeazaInaltimeArbore(rad->dr);
	return 1 + (hSt > hDr ? hSt : hDr);
}

float calculeazaPretTotal(Nod* rad) {
	if (rad == NULL)
		return 0;
	return rad->info.pret + calculeazaPretTotal(rad->st) + calculeazaPretTotal(rad->dr);
}

float calculeazaPretulMasinilorUnuiSofer(Nod* rad, const char* numeSofer) {
	if (rad == NULL)
		return 0;
	float s = 0;
	if (strcmp(rad->info.numeSofer, numeSofer) == 0)
		s += rad->info.pret;
	s += calculeazaPretulMasinilorUnuiSofer(rad->st, numeSofer);
	s += calculeazaPretulMasinilorUnuiSofer(rad->dr, numeSofer);
	return s;
}

int main() {
	Nod* arbore = citireArboreDeMasiniDinFisier("masini.txt");

	afisareMasiniDinArbore(arbore);

	printf("Numar noduri: %d\n", determinaNumarNoduri(arbore));
	printf("Inaltime arbore: %d\n", calculeazaInaltimeArbore(arbore));
	printf("Pret total: %.2f\n", calculeazaPretTotal(arbore));

	float pretSofer = calculeazaPretulMasinilorUnuiSofer(arbore, "Popescu");
	printf("Pret masini Popescu: %.2f\n", pretSofer);

	int idCautat = 3;
	Masina m = getMasinaByID(arbore, idCautat);
	if (m.model != NULL) {
		printf("\nMasina cu ID %d:\n", idCautat);
		afisareMasina(m);
	}
	else {
		printf("Masina cu ID %d nu exista.\n", idCautat);
	}

	dezalocareArboreDeMasini(arbore);
	return 0;
}
